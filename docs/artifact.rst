Artifact API
------------------------------------------------

PyTerrier's Artifact API provides a powerful way to share resources, such as indexes,
cached results, and more. Re-using one another's artifacts is a great way to help achieve
green (i.e., sustainable) research [#]_.

The API is provided by the :class:`~pyterrier.Artifact` classs, which includes methods
for sharing artifacts using a variety of services, such as HuggingFace Hub and Zenodo.

.. note::
    **What is an Artifact?** "Artifact" often refers to a broad range of items. For
    instance, the `ACM defines  <https://www.acm.org/publications/policies/artifact-review-and-badging-current>`__
    an artifact as: "a digital object that was either created by the authors to be used as part of the study
    or generated by the experiment itself."

    In PyTerrier, we use a narrower definition. We treat artifacts as components that
    can be represented as a file or directory stored on disk. These are most frequently built indexes,
    but can also be resources such as cached pipeline results.

Working with Artifacts
=================================================

TODO

Artifact Implementations
=================================================

Here's a list of existing :class:`~pyterrier.Artifact` implementations. (If you've added one,
feel free to make a PR to this page to add it!)

.. To add to this list, edit extras/generate_includes.py
.. include:: ./_includes/artifact_list.rst

Advanced: Writing Your Own Artifact
=================================================

TODO: code, entry points

Advanced: Writing Custom Artifact URL Schemes
=================================================

TODO

----

.. [#] See: Scells, Zhuang, and Zuccon. `Reduce, Reuse, Recycle: Green Information Retrieval Research 
       <https://dl.acm.org/doi/10.1145/3477495.3531766>`_. SIGIR 2022.
